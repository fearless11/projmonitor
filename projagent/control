#!/bin/bash

WORKSPACE=$(cd $(dirname $0)/; pwd)
cd $WORKSPACE

mkdir -p log

module=agent
app=proj$module
conf=javabeat.yml
conf1=cfg.json
pidfile=log/app.pid
logfile=log/app.log

function check_configure(){
    hostname=`ip add |grep inet |grep 10.10 |awk -F'/' '{print substr($1,10)}'| tr -d ' '`
    sed -i "/hostname/c \    \"hostname\":\"$hostname\"," $WORKSPACE/cfg.json
    grep alert.we.com /etc/hosts &> /dev/null || (/bin/cp /etc/hosts /home/ && echo "10.10.10.142 alert.we.com" >> /etc/hosts)
    # 设置开机启动
    grep checkprojagent.sh /var/spool/cron/root &> /dev/null || (cp /var/spool/cron/root /home && echo "* * * * * sh /data/to8to/tools/projagent/checkprojagent.sh &>/dev/null" >> /var/spool/cron/root )
}

function check_pid() {
    if [ -f $pidfile ]; then
        pid=`cat $pidfile`
        if [ -n $pid ]; then
            running=`ps -p $pid|grep -v "PID TTY" |wc -l`
            return $running
        fi
    fi
    return 0
}

function start() {
    check_pid
    running=$?
    if [ $running -gt 0 ]; then
        echo -n "$app now is running already, pid="
        cat $pidfile
        return 1
    fi

    if ! [ -f $conf ]; then
        echo "Config file $conf doesn't exist, creating one."
        cp cfg.default.json $conf
    fi
    nohup ./$app -c $conf -c1 $conf1 &> $logfile &
    sleep 1
    running=`ps -p $! | grep -v "PID TTY" | wc -l`
    if [ $running -gt 0 ]; then
        echo $! > $pidfile
        echo "$app started..., pid=$!"
    else
        echo "$app failed to start."
        return 1
    fi
}

function stop() {
    if [ -f $pidfile ]; then
        pid=`cat $pidfile`
        kill $pid
        rm -f $pidfile
    fi
    sleep 1
    pid=`pgrep $app`
    if [ -n $pid ] && [ x"$pid" != "x" ]; then
        kill $pid
    fi
    
    echo "$app stoped..."
}

function restart() {
    stop
    sleep 1
    start
}

function reload() {
    kill -USR1 $(pidof $app) &> /dev/null
    if [ $? -eq 0 ]; then
        echo "$app $conf reload..."
    else
        echo "$app $conf failed to reload."
    fi
}

function status() {
    check_pid
    running=$?
    if [ $running -gt 0 ]; then
        echo started
    else
        echo stoped
    fi
}

function tailf() {
    tail -f $logfile
}

function build() {
    go build
    if [ $? -ne 0 ]; then
        exit $?
    fi
    #mv $module $app
    ./$app -v
}

function pack() {
    #build
    #git log -1 --pretty=%h > gitversion
    mkdir ./pkg
    version=`./$app -v`
    file_list="control cfg.default.json $app checkprojagent.sh"
    echo "...tar ./pkg/$app-$version.tar.gz <= $file_list"
    #tar zcf $app-$version.tar.gz gitversion $file_list
    tar zcf ./pkg/$app-$version.tar.gz $file_list
}

function packbin() {
    build
    #git log -1 --pretty=%h > gitversion
    version=`./$app -v`
    #tar zcvf $app-bin-$version.tar.gz $app gitversion
    tar zcvf $app-bin-$version.tar.gz $app
}

function help() {
    echo "$0 build|pack|start|stop|restart|reload|status|tail"
}

check_configure

if [ "$1" == "" ]; then
    help
elif [ "$1" == "stop" ]; then
    stop
elif [ "$1" == "start" ]; then
    start
elif [ "$1" == "restart" ]; then
    restart
elif [ "$1" == "reload" ]; then
    reload
elif [ "$1" == "status" ]; then
    status
elif [ "$1" == "tail" ]; then
    tailf
elif [ "$1" == "build" ]; then
    build
elif [ "$1" == "pack" ]; then
    pack
elif [ "$1" == "packbin" ]; then
    packbin
else
    help
fi
